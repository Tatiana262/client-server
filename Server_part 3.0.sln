//main.cpp !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include <iostream>
#include <WinSock2.h>
#include <WS2tcpip.h>
#include <stdio.h>
#include <vector>
#include "filesystem.h"
#include<cstring>


#pragma comment(lib, "Ws2_32.lib")
#define BUFF_SIZE 1024

using namespace std;

void check_sending(short& packet_size, SOCKET clientConn, SOCKET servSock);
void check_receiving(short& packet_size, SOCKET clientConn, SOCKET servSock);



int main()
{

	WSADATA wsData;
	int erState = WSAStartup(MAKEWORD(2, 2), &wsData);
	if (erState)
	{
		cout << "Error WinSock version initialization # " << GetLastError() << endl;
		return 1;
	}
	else
		cout << "WinSock initialization is OK" << endl;

	// Server socket initialization
	SOCKET servSock = socket(AF_INET, SOCK_STREAM, 0);
	if (servSock == INVALID_SOCKET)
	{
		cout << "Error initialization socket # " << WSAGetLastError() << endl;
		closesocket(servSock);
		WSACleanup();
		return 1;
	}
	else
		cout << "Serever socket initialization is OK" << endl;

	// Server socket binding
	sockaddr_in servInfo;
	ZeroMemory(&servInfo, sizeof(servInfo));

	servInfo.sin_family = AF_INET;
	servInfo.sin_port = htons(1024);

	in_addr ip_to_num;
	erState = inet_pton(AF_INET, "127.0.0.1", &ip_to_num);
	if (erState <= 0)
	{
		cout << "Error in IP translation to special numeric format" << endl;
		return 1;
	}

	servInfo.sin_addr = ip_to_num;

	erState = bind(servSock, (SOCKADDR*)&servInfo, sizeof(servInfo));
	if (erState)
	{
		cout << "Error socket binding to server info. Errrr # " << WSAGetLastError() << endl;
		closesocket(servSock);
		WSACleanup();
		return 1;
	}
	else
		cout << "Binding socket to server info is OK" << endl;

	//Starting to listen to any Clients
	erState = listen(servSock, SOMAXCONN);
	if (erState)
	{
		cout << "Can't start to listen to. Error # " << WSAGetLastError() << endl;
		closesocket(servSock);
		WSACleanup();
		return 1;
	}
	else
		cout << "Listening ..." << endl;

	//Client socket creation and acception in case of connection
	path p_folder = "C:\\Users\\User\\Documents\\Server";

	sockaddr_in clientInfo;
	ZeroMemory(&clientInfo, sizeof(clientInfo));
	int clientInfo_size = sizeof(clientInfo);
	SOCKET clientConn = accept(servSock, (SOCKADDR*)&clientInfo, &clientInfo_size);
	if (clientConn == INVALID_SOCKET)
	{
		cout << "Client is detected, but can't be connected to server. Error # " << WSAGetLastError() << endl;
		closesocket(servSock);
		closesocket(clientConn);
		WSACleanup();
		return 1;
	}
	else
	{
		cout << "Connection to a client established successfully" << endl;
		char clientIP[22];
		inet_ntop(AF_INET, &clientInfo.sin_addr, clientIP, INET_ADDRSTRLEN);
		cout << "Client connected with IP address " << clientIP << endl;

		char name[80] = "User ";
		strcat_s(name, clientIP);

		p_folder /= name;
		cout << "Folder of a client is: " << p_folder << endl;

		cout<<createDirectory(p_folder)<<endl;
		current_path(p_folder);
	}

	//Exchange text data between Server and Client. Disconnection if a client send "xxx"

	const int packageMessageSize = 1024;
	vector <char> servBuff(packageMessageSize), clientBuff(packageMessageSize);							// Creation of buffers for sending and receiving data

	short packet_size = 0;	
	
	

	while (true)
	{
		servBuff.resize(packageMessageSize);
		packet_size = recv(clientConn, servBuff.data(), servBuff.size(), 0);
		check_receiving(packet_size, clientConn, servSock);

		servBuff.resize(packet_size);
		string clear_message(servBuff.data(), servBuff.size());
		
		
		
		cout << "Client's message: " << servBuff.data() << endl;
		servBuff.clear();
		
		string res;
		if (clear_message == "exit") {
			shutdown(clientConn, SD_BOTH);
			closesocket(servSock);
			closesocket(clientConn);
			WSACleanup();
			return 0;
		}
		else
		{
			if (clear_message == "createDirectory")
			{
				
				servBuff.resize(packageMessageSize);
				string otv1("Input the directory's name to create: ");
				clientBuff.assign(otv1.begin(), otv1.end());

				packet_size = send(clientConn, clientBuff.data(), clientBuff.size(), 0);
				check_sending(packet_size, clientConn, servSock);
				clientBuff.clear();

				packet_size = recv(clientConn, servBuff.data(), servBuff.size(), 0);
				check_receiving(packet_size, clientConn, servSock);

				path p = current_path() /= servBuff.data();

				res = createDirectory(p);
			}
			else if (clear_message == "deleteDirectory")
			{
				servBuff.resize(packageMessageSize);
				string otv1("Input the directory's name to delete: ");
				clientBuff.assign(otv1.begin(), otv1.end());
				packet_size = send(clientConn, clientBuff.data(), clientBuff.size(), 0);
				check_sending(packet_size, clientConn, servSock);
				clientBuff.clear();

				packet_size = recv(clientConn, servBuff.data(), servBuff.size(), 0);
				check_receiving(packet_size, clientConn, servSock);

				path p = current_path() /= servBuff.data();

				res = deleteDirectory(p);
			}
			else if (clear_message == "createFile")
			{
				servBuff.resize(packageMessageSize);
				string otv1("Input the file's name to create: ");
				clientBuff.assign(otv1.begin(), otv1.end());
				packet_size = send(clientConn, clientBuff.data(), clientBuff.size(), 0);
				check_sending(packet_size, clientConn, servSock);
				clientBuff.clear();

				packet_size = recv(clientConn, servBuff.data(), servBuff.size(), 0);
				check_receiving(packet_size, clientConn, servSock);

				path p = current_path() /= servBuff.data();

				res = createFile(p);
			}
			else if (clear_message == "deleteFile")
			{
				servBuff.resize(packageMessageSize);
				string otv1("Input the file's name to delete: ");
				clientBuff.assign(otv1.begin(), otv1.end());
				packet_size = send(clientConn, clientBuff.data(), clientBuff.size(), 0);
				check_sending(packet_size, clientConn, servSock);
				clientBuff.clear();

				packet_size = recv(clientConn, servBuff.data(), servBuff.size(), 0);
				check_receiving(packet_size, clientConn, servSock);

				path p = current_path() /= servBuff.data();

				res = deleteFile(p);
			}
		}

		servBuff.clear();
		clientBuff.assign(res.begin(), res.end());
		packet_size = send(clientConn, clientBuff.data(), clientBuff.size(), 0);
		check_sending(packet_size, clientConn, servSock);
		clientBuff.clear();
	}

	closesocket(servSock);
	closesocket(clientConn);
	WSACleanup();

	return 0;

}

void check_sending(short& packet_size, SOCKET clientConn, SOCKET servSock)
{
	if (packet_size == SOCKET_ERROR) {
		cout << "Can't send message to Client. Error # " << WSAGetLastError() << endl;
		closesocket(servSock);
		closesocket(clientConn);
		WSACleanup();
		exit(1);
	}
}

void check_receiving(short& packet_size, SOCKET clientConn, SOCKET servSock)
{
	if (packet_size == SOCKET_ERROR) {
		cout << "Can't receive message from Client. Error # " << WSAGetLastError() << endl;
		closesocket(servSock);
		closesocket(clientConn);
		WSACleanup();
		exit(1);
	}
}

//filesystem.h !!!!!!!!!!!!!!!!!!!!!!!!!!!

#pragma once
#include <iostream>
#include <filesystem>
#include <fstream>
#include <string>

using namespace std;
using namespace filesystem;

string createDirectory(const path& pdir);
string deleteDirectory(const path& pdir);
string createFile(const path& pf);
string deleteFile(const path& pf);
void infToFile(const string& pf);
void add_infToFile(const string& pf);
void cd(const path& p);
void printTree(const string& path, const int& level);




//filesystem.cpp !!!!!!!!!!!!!!!!!!!!!!!!!!!
#include "filesystem.h"


string createDirectory(const path& pdir)
{
	if (create_directory(pdir))
		return "Directory is created";
	else
		return "Directory isn't created";
}

string deleteDirectory(const path& pdir)
{
	if (remove_all(pdir))
		return "Directory is removed";
	else
		return "Ditectory isn't removed";
}

string createFile(const path& pf)
{
	ofstream fout(pf);
	if (fout.is_open())
	{
		fout.close();
		return "File is created";
	}
	else
		return "File isn't created";
}

string deleteFile(const path& pf)
{
	if (remove(pf))
		return "File is removed";
	else
		return "File isn't removed";
}

void infToFile(const string& pf)
{
	ofstream fout(pf);
	if (!fout.is_open())
	{
		cout << "File can't be opened" << endl;
	}
	else
	{
		cout << "Write information to file. If you want to stop input, enter - \"exit\"" << endl;
		string str;
		while (getline(cin, str) && str != "exit")
		{
			fout << str << endl;
		}
		fout.close();
	}
}

void add_infToFile(const string& pf)
{
	ofstream fout("myfile.txt", ios::app);
	if (!fout.is_open())
	{
		cout << "File can't be opened" << endl;
	}
	else
	{
		cout << "Add information to file. If you want to stop input, enter - \"exit\"" << endl;
		string str;
		while (getline(cin, str) && str != "exit")
		{
			fout << str << endl;
		}
		fout.close();
	}
}

void cd(const path& p)
{
	if (exists(p) && is_directory(p))
	{
		current_path(p);
		cout << "Current directory is " << p << endl;
	}
	else
	{
		cout << "Directory " << p << " does't exist" << endl;
	}
}

void printTree(const string& path, const int& level)
{
	for (const auto& entry : directory_iterator(path))
	{
		cout << string(level + 1, ' ') << "|-- " << entry.path().filename() << endl;

		if (is_directory(entry))
		{
			printTree(entry.path().string(), level + 1);
		}
	}
}
